version: '3.9'

services:
  web:
    container_name: web
    build:
      dockerfile: docker/web/Dockerfile
      context: .
    ports:
      - "8000:8000"
    # command: scripts/web/startup.sh -m -l
    command: uvicorn webapp.main:create_app --host=0.0.0.0 --port=8000
    restart: on-failure
    env_file:
      - ./conf/.env
    volumes:
      - .:/code
    depends_on:
      web_db:
        condition: service_healthy
    networks:
      - sirius_network

  web_db:
    container_name: web_db
    image: library/postgres:13.2
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=main_db
    restart: on-failure
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "postgres",
          "-d",
          "main_db"
        ]
      interval: 5s
      retries: 5
    volumes:
      - ./scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - sirius_network

  test_db:
    container_name: test_db
    image: library/postgres:13.2
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=test_db
    profiles:
      - donotstart
    
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "postgres",
          "-d",
          "test_db"
        ]
      interval: 5s
      retries: 5
    # networks:
    #   - sirius_network


  tests:
    container_name: tests
    build:
      dockerfile: docker/web/Dockerfile
      context: .
    volumes:
      - ./:/app/
    depends_on:
      - test_db
    command: [ "pytest", "-vvs" ]
    profiles:
      - donotstart
    # networks:
    #   - sirius_network

  redis:
    container_name: redis
    image: redis:6.2.4
    ports:
      - "6379:6379"
    networks:
      - sirius_network

  flower:
    image: mher/flower:0.9.7
    command:
      [
        'flower',
        '--broker=redis://redis:6379/',
        '--port=5555'
      ]
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - sirius_network

  worker:
    build:
      context: .
      dockerfile: docker/celery/Dockerfile
    command: celery -A webapp.integrations.celery_app.celery.app_celery worker -l info
    # command: tail -f /dev/null
    environment:
      - BROKER_URL=redis://redis:6379
      - RESULT_BACKEND=redis://redis:6379
    depends_on:
      - redis
      - web
    networks:
      - sirius_network

volumes:
  prom_data:


networks:
  sirius_network:
    #    external: True
    driver: bridge
